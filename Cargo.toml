[package]
name = "bgp-scout"
version = "0.1.0"
authors = ["Jeremiah Gowdy <jeremiah@gowdy.me>"]
edition = "2021"
license = "MIT"
repository = "https://github.com/jgowdy/bgp-scout"
description = "bgp-scout"
categories = ["network-programming"]
default-run = "bgp-scout"
readme = "README.md"

[[bin]]
name = "bgp-scout"
path = "src/main.rs"

[dependencies]
bgpkit-parser = { version = "0.10.9", features = ["cli"] }

####################
# Core BGP structs #
####################
num_enum = { version = "0.7", optional = true }
serde = { version = "1.0", features = ["derive"], optional = true }
itertools = { version = "0.12", optional = true }
ipnet = { version = "2.7", optional = true }
bitflags = { version = "2.3.3", features = ["serde"], optional = true }

#######################
# Parser dependencies #
#######################
bytes = { version = "1.5.0", optional = true }
hex = { version = "0.4.3", optional = true } # bmp/openbmp parsing
log = { version = "0.4", optional = true }
oneio = { version = "0.16.7", default-features = false, features = ["remote", "gz", "bz"], optional = true }
regex = { version = "1", optional = true } # used in parser filter
chrono = { version = "0.4.24", optional = true } # parser filter
serde_json = { version = "1.0", optional = true } # RIS Live parsing

####################
# CLI dependencies #
####################
env_logger = { version = "0.11", optional = true }
clap = { version = "4.0", features = ["derive"], optional = true }
ipnetwork = "0.20.0"
reqwest = "0.12.4"
futures-util = "0.3.30"
flate2 = "1.0.30"
filetime = "0.2.23"
instant = "0.1.13"

[features]
default = ["parser", "rustls", "cli"]
diagnostic_logging = []
models = [
    "num_enum",
    "num_enum/complex-expressions",
    "ipnet",
    "itertools",
    "bitflags",
]
parser = [
    "bytes",
    "chrono",
    "env_logger",
    "log",
    "models",
    "regex",
]
cli = [
    "clap",
    "parser",
    "env_logger",
    "serde",
    "serde_json"
]
rislive = [
    "parser",
    "serde",
    "serde_json",
    "hex",
]
serde = [
    "dep:serde",
    "ipnet/serde",
]
native-tls = [
    "oneio/native-tls",
]
rustls = [
    "oneio/rustls",
]

# optional compression algorithms support
xz = [
    "oneio/xz"
]
lz = [
    "oneio/lz"
]

#  GoDaddy Rust Lint Rules
#
#  These Rust lint rules should be added to every Rust workspace-level `Cargo.toml` file at GoDaddy.
#   * This comment header should not be included *
#
#  The warnings are intentionally over-restrictive.
#  Some rules may need to be disabled in certain projects, however, alternative approaches will usually be better.
#
#  Examples where a different approach is better:
#  - Proper `Result` propagation should be used over `.unwrap()` whenever possible. If not possible `.expect()` should be used.
#
#  Examples where a rule will need to be disabled:
#  - CLI projects will need to allow `clippy::print_stdout` and `clippy::print_stderr` in the CLI portion.
#  - Projects which use FFI will need to `unsafe_code = "deny"` rather than `forbid`.
#
#  Additionally, the disabled-by-default `clippy::multiple_crate_versions` rule can be useful but is easily triggered by dependency tree drift.

# NOTE:
#
# In projects which make use of documentation examples, it is still preferable to include the following directives at crate-level (at the top of `lib.rs`).
#
# ```rust
# #![doc(test(attr(deny(future_incompatible, warnings))))]
# #![doc(test(attr(allow(unused_extern_crates, unused_variables))))]
# ```
#
# It is also suggested to do `#![allow(clippy::unwrap_used)]` at the top of files in the `tests/` directory.

# HOW TO USE
#
# Minimum Rust Version: 1.74
# Copy the following into the bottom your `Cargo.toml` file.
# For each `Cargo.toml` file (including this one), include the `[lints]` with `workspace = true`.

[lints]
workspace = true

[workspace.lints.rust]
unsafe_code = "forbid"
future_incompatible = "deny"
meta_variable_misuse = "warn"
missing_debug_implementations = "warn"
noop_method_call = "warn"
rust_2018_idioms = "warn"
trivial_casts = "warn"
unused_lifetimes = "warn"
unused_qualifications = "warn"
unused_macro_rules = "warn"
variant_size_differences = "warn"

[workspace.lints.clippy]
default_union_representation = "deny"
exit = "deny"
lossy_float_literal = "deny"
mem_forget = "deny"
multiple_inherent_impl = "deny"
mut_mut = "deny"
ptr_as_ptr = "deny"
unwrap_in_result = "deny"
unwrap_used = "deny"
wildcard_dependencies = "deny"
dbg_macro = "warn"
empty_drop = "warn"
fallible_impl_from = "warn"
inefficient_to_string = "warn"
macro_use_imports = "warn"
match_same_arms = "warn"
# multiple_crate_versions = "warn"
no_effect_underscore_binding = "warn"
panic = "warn"
#print_stderr = "warn"
#print_stdout = "warn"
same_name_method = "warn"
single_char_lifetime_names = "warn"
string_to_string = "warn"
trait_duplication_in_bounds = "warn"
type_repetition_in_bounds = "warn"
unimplemented = "warn"
unneeded_field_pattern = "warn"
unseparated_literal_suffix = "warn"
used_underscore_binding = "warn"
